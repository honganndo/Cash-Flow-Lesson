from flask import Flask, render_template, request, redirect, url_for, jsonify, Response, session

app = Flask(__name__, static_url_path='/static')
app.secret_key = 'your_secret_key'


# Dictionary to store quiz answers
quiz_data = {
    "1": {
        "number": 1,
        "question": "What is the primary purpose of a cash flow statement?",
        "options": [
            "A. To show the company's profitability over a period of time.",
            "B. To provide information about the company's cash receipts and cash payments during a period.",
            "C. To detail the company's sales figures for the fiscal year.",
            "D. To outline the company's investment strategy."
        ],
        "answer": "B. To provide information about the company's cash receipts and cash payments during a period.",
        "lesson": "lesson1",
    },
    "2": {
        "number": 2,
        "question": "Which section of the cash flow statement reports cash flows from borrowing and repaying loans?",
        "options": [
            "A. Cash flows from operating activities.",
            "B. Cash flows from investing activities.",
            "C. Cash flows from financing activities.",
            "D. Cash flows from operating, investing, and financing activities."
        ],
        "answer": "C. Cash flows from financing activities.",
        "lesson": "lesson4",
    },
    "3": {
        "number": 3,
        "question": "What does a positive cash flow from operating activities indicate?",
        "options": [
            "A. The company generates more cash from its core business operations than it spends.",
            "B. The company is experiencing a cash deficit.",
            "C. The company has high levels of debt.",
            "D. The company is experiencing financial distress."
        ],
        "answer": "A. The company generates more cash from its core business operations than it spends.",
        "lesson": "lesson2",
    },
    "4": {
        "number": 4,
        "question": "How are cash flows from investing activities typically categorized?",
        "options": [
            "A. Cash inflows only.",
            "B. Cash inflows and outflows related to buying and selling investments or assets.",
            "C. Cash outflows only.",
            "D. Cash inflows and outflows related to financing activities."
        ],
        "answer": "B. Cash inflows and outflows related to buying and selling investments or assets.",
        "lesson": "lesson3",
    },
    "5": {
        "number": 5,
        "question": "What is free cash flow?",
        "options": [
            "A. The total amount of cash and cash equivalents.",
            "B. The net income of a company.",
            "C. The total revenue generated by a company.",
            "D. The cash a company generates after accounting for capital expenditures."
        ],
        "answer": "D. The cash a company generates after accounting for capital expenditures.",
        "lesson": "lesson4",
    },
    "6": {
        "number": 6,
        "question": "What is the operating cash flow ratio?",
        "options": [
            "A. The ratio of operating cash flow to current liabilities.",
            "B. The ratio of net income to total assets.",
            "C. The ratio of cash flows from financing activities to cash flows from operating activities.",
            "D. The ratio of net income to shareholders' equity."
        ],
        "answer": "A. The ratio of operating cash flow to current liabilities.",
        "lesson": "lesson1",
    },
    "7": {
        "number": 7,
        "question": "Which of the following items is an example of an operating cash flow?",
        "options": [
            "A. Sale of equipment.",
            "B. Payment of dividends to shareholders.",
            "C. Revenue from sales.",
            "D. Issuance of long-term debt."
        ],
        "answer": "C. Revenue from sales.",
        "lesson": "lesson2",
    },
    "8": {
        "number": 8,
        "question": "Which of the following is a key metric derived from cash flow statements?",
        "options": [
            "A. Earnings per share.",
            "B. Total revenue.",
            "C. Cash flow from operations.",
            "D. Net income."
        ],
        "answer": "C. Cash flow from operations.",
        "lesson": "lesson6",
    },
    "9": {
        "number": 9,
        "question": "Why is it important to analyze cash flow data?",
        "options": [
            "A. To predict future stock prices.",
            "B. To evaluate the company's liquidity and solvency.",
            "C. To analyze competitors' financial performance.",
            "D. To determine the company's market share."
        ],
        "answer": "B. To evaluate the company's liquidity and solvency.",
        "lesson": "lesson6",
    },
    "10": {
        "number": 10,
        "question": "What should you look for when analyzing cash flow trends?",
        "options": [
            "A. Patterns over multiple periods.",
            "B. Daily fluctuations in cash balance.",
            "C. Consistency in dividend payments.",
            "D. Quarterly financial reports."
        ],
        "answer": "A. Patterns over multiple periods.",
        "lesson": "lesson6",
    }
}

# Routes
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/lessons')
def lessons():
    return render_template('lessons.html')

@app.route('/lesson1')
def lesson1():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson1.html')

@app.route('/lesson2')
def lesson2():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson2.html')

@app.route('/lesson3')
def lesson3():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson3.html')

@app.route('/lesson4')
def lesson4():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson4.html')

@app.route('/lesson5')
def lesson5():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson5.html')

@app.route('/lesson6')
def lesson6():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson6.html')


@app.route('/lesson7')
def lesson7():
    # Here you can implement the logic to fetch the learning material for the specified lesson_number
    # For now, just rendering the learning page
    return render_template('lesson7.html')

@app.route('/startquiz', methods=['GET', 'POST'])
def startquiz():
    if request.method == 'GET':
        return render_template('start_quiz.html')
    elif request.method == 'POST':
        # Start the quiz by setting the current question number to 1
        session['current_question_number'] = 1
        # Redirect to the first question
        return redirect(url_for('quiz_question', q_number=session['current_question_number']))

@app.route('/quiz/q<int:q_number>', methods=['GET', 'POST'])
def quiz_question(q_number):
    if request.method == 'GET':
        # Retrieve the current question from quiz_data based on the current question number
        question = quiz_data.get(str(q_number))  # Convert q_number to string for dictionary access
        return render_template('quiz.html', question=question)
    elif request.method == 'POST':
        # Process the submitted answer and store it in session
        user_answer = request.form.get('selected_option')
        
        # Store the user's answer in session using the question number as the key
        session[f'question_{q_number}_answer'] = user_answer

        # If it's not the last question, redirect to the next question
        if int(q_number) < len(quiz_data):
            next_q_number = int(q_number) + 1
            return redirect(url_for('quiz_question', q_number=next_q_number))
        else:
            return redirect(url_for('quiz_result'))

@app.route('/result', methods=['GET', 'POST'])
def quiz_result():
    user_answers = {}

    # Iterate over quiz_data and retrieve user answers from session
    for question_number, question_data in quiz_data.items():
        question_key = f'question_{question_number}_answer'
        user_answers[question_key] = session.get(question_key)

    score = 0
    results = {}

    # Iterate over user answers and compare with correct answers from quiz_data
    for question_number, user_answer in user_answers.items():
        question_data = quiz_data.get(question_number.split('_')[1])  # Extract question number from key
        correct_answer = question_data['answer']
        question = question_data['question']
        lesson = question_data['lesson']
        
        if user_answer == correct_answer:
            score += 1
            results[question_number] = {'user_answer': user_answer, 'correct': True, 'correct_answer': correct_answer, 'question': question, 'lesson': lesson}
        else:
            results[question_number] = {'user_answer': user_answer, 'correct': False, 'correct_answer': correct_answer, 'question': question, 'lesson': lesson}

    return render_template('result.html', results=results, score=score)

if __name__ == '__main__':
    app.run(debug=True)
